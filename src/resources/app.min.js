"use strict";
var _KeyboardLayout;

function _typeof(a) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(a) {
        return typeof a
    } : function(a) {
        return a && "function" == typeof Symbol && a.constructor === Symbol && a !== Symbol.prototype ? "symbol" : typeof a
    }, _typeof(a)
}

function _toConsumableArray(a) {
    return _arrayWithoutHoles(a) || _iterableToArray(a) || _unsupportedIterableToArray(a) || _nonIterableSpread()
}

function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
}

function _iterableToArray(a) {
    if ("undefined" != typeof Symbol && null != a[Symbol.iterator] || null != a["@@iterator"]) return Array.from(a)
}

function _arrayWithoutHoles(a) {
    if (Array.isArray(a)) return _arrayLikeToArray(a)
}

function _slicedToArray(a, b) {
    return _arrayWithHoles(a) || _iterableToArrayLimit(a, b) || _unsupportedIterableToArray(a, b) || _nonIterableRest()
}

function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
}

function _iterableToArrayLimit(b, c) {
    var d = null == b ? null : "undefined" != typeof Symbol && b[Symbol.iterator] || b["@@iterator"];
    if (null != d) {
        var g, h, j, k, l = [],
            a = !0,
            m = !1;
        try {
            if (j = (d = d.call(b)).next, 0 === c) {
                if (Object(d) !== d) return;
                a = !1
            } else
                for (; !(a = (g = j.call(d)).done) && (l.push(g.value), l.length !== c); a = !0);
        } catch (a) {
            m = !0, h = a
        } finally {
            try {
                if (!a && null != d["return"] && (k = d["return"](), Object(k) !== k)) return
            } finally {
                if (m) throw h
            }
        }
        return l
    }
}

function _arrayWithHoles(a) {
    if (Array.isArray(a)) return a
}

function _createForOfIteratorHelper(b, c) {
    var d = "undefined" != typeof Symbol && b[Symbol.iterator] || b["@@iterator"];
    if (!d) {
        if (Array.isArray(b) || (d = _unsupportedIterableToArray(b)) || c && b && "number" == typeof b.length) {
            d && (b = d);
            var e = 0,
                f = function() {};
            return {
                s: f,
                n: function() {
                    return e >= b.length ? {
                        done: !0
                    } : {
                        done: !1,
                        value: b[e++]
                    }
                },
                e: function(a) {
                    throw a
                },
                f: f
            }
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
    }
    var g, h = !0,
        i = !1;
    return {
        s: function() {
            d = d.call(b)
        },
        n: function() {
            var a = d.next();
            return h = a.done, a
        },
        e: function(a) {
            i = !0, g = a
        },
        f: function() {
            try {
                h || null == d["return"] || d["return"]()
            } finally {
                if (i) throw g
            }
        }
    }
}

function _unsupportedIterableToArray(b, c) {
    if (b) {
        if ("string" == typeof b) return _arrayLikeToArray(b, c);
        var a = {}.toString.call(b).slice(8, -1);
        return "Object" === a && b.constructor && (a = b.constructor.name), "Map" === a || "Set" === a ? Array.from(b) : "Arguments" === a || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a) ? _arrayLikeToArray(b, c) : void 0
    }
}

function _arrayLikeToArray(b, c) {
    (null == c || c > b.length) && (c = b.length);
    for (var d = 0, f = Array(c); d < c; d++) f[d] = b[d];
    return f
}

function _classCallCheck(b, a) {
    if (!(b instanceof a)) throw new TypeError("Cannot call a class as a function")
}

function _defineProperties(a, b) {
    for (var c, d = 0; d < b.length; d++) c = b[d], c.enumerable = c.enumerable || !1, c.configurable = !0, "value" in c && (c.writable = !0), Object.defineProperty(a, _toPropertyKey(c.key), c)
}

function _createClass(a, b, c) {
    return b && _defineProperties(a.prototype, b), c && _defineProperties(a, c), Object.defineProperty(a, "prototype", {
        writable: !1
    }), a
}

function _defineProperty(a, b, c) {
    return (b = _toPropertyKey(b)) in a ? Object.defineProperty(a, b, {
        value: c,
        enumerable: !0,
        configurable: !0,
        writable: !0
    }) : a[b] = c, a
}

function _toPropertyKey(a) {
    var b = _toPrimitive(a, "string");
    return "symbol" == _typeof(b) ? b : b + ""
}

function _toPrimitive(a, b) {
    if ("object" != _typeof(a) || !a) return a;
    var c = a[Symbol.toPrimitive];
    if (void 0 !== c) {
        var d = c.call(a, b || "default");
        if ("object" != _typeof(d)) return d;
        throw new TypeError("@@toPrimitive must return a primitive value.")
    }
    return ("string" === b ? String : Number)(a)
}
var Shuang = {
    resource: {
        dict: {},
        dictHant: {},
        bopomofo: {},
        schemeList: {},
        scheme: {},
        keyboardLayoutList: {},
        keyboardLayout: {},
        emoji: {
            right: "✅",
            wrong: "❎"
        }
    },
    core: {
        model: {},
        current: {},
        order: {
            shengIndex: 0,
            yunIndex: 0
        },
        history: [],
        keyboardLayout: {}
    },
    app: {
        setting: {
            config: {},
            reload: function() {}
        },
        importedJS: [],
        modeList: [],
        action: {}
    }
}, $ = document.querySelector.bind(document),
    $$ = document.querySelectorAll.bind(document);

function importJS() {
    var a = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : "",
        b = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : function() {};
    if (Shuang.app.importedJS.includes(a)) return void b();
    Shuang.app.importedJS.push(a);
    a = "./resources/".concat(a, ".min.js");
    var c = document.createElement("script");
    Object.assign(c, {
        src: a,
        onload: b
    }), document.body.appendChild(c)
}
Shuang.resource.dict = {
    "": {
        a: "啊",
        ai: "爱",
        an: "安",
        ang: "昂",
        ao: "奥",
        e: "鹅",
        ei: ["诶"],
        en: "恩",
        er: "耳",
        o: "哦",
        ou: "欧"
    },
    b: {
        a: "爸",
        ai: "白",
        an: "班",
        ang: "帮",
        ao: "包",
        ei: "背",
        en: "本",
        eng: "崩",
        i: "必",
        ian: "变",
        iao: "表",
        ie: "别",
        in : "宾",
        ing: "冰",
        o: "播",
        u: "部"
    },
    c: {
        a: "擦",
        ai: "彩",
        an: "餐",
        ang: "苍",
        ao: "草",
        e: "测",
        en: ["岑"],
        eng: "层",
        i: "词",
        ong: "聪",
        ou: "凑",
        u: "粗",
        uan: "窜",
        ui: "催",
        un: "村",
        uo: "错"
    },
    d: {
        a: "打",
        ai: "代",
        an: "但",
        ang: "当",
        ao: "到",
        e: "德",
        ei: ["得"],
        eng: "等",
        i: "帝",
        ia: ["嗲"],
        ian: "点",
        iao: "钓",
        ie: "叠",
        ing: "顶",
        iu: "丢",
        ong: "东",
        ou: "斗",
        u: "杜",
        uan: "短",
        ui: "对",
        un: "顿",
        uo: "多"
    },
    f: {
        a: "法",
        an: "翻",
        ang: "方",
        ei: "飞",
        en: "分",
        eng: "风",
        o: "佛",
        ou: ["否"],
        u: "服"
    },
    g: {
        a: ["旮"],
        ai: "该",
        an: "干",
        ang: "刚",
        ao: "高",
        e: "个",
        ei: ["给"],
        en: "跟",
        eng: "更",
        ong: "公",
        ou: "狗",
        u: "谷",
        ua: "瓜",
        uai: "怪",
        uan: "关",
        uang: "光",
        ui: "鬼",
        un: "滚",
        uo: "国"
    },
    h: {
        a: "哈",
        ai: "海",
        an: "汉",
        ang: "杭",
        ao: "好",
        e: "盒",
        ei: "黑",
        en: "很",
        eng: "横",
        ong: "宏",
        ou: "猴",
        u: "户",
        ua: "华",
        uai: "坏",
        uan: "欢",
        uang: "黄",
        ui: "灰",
        un: "昏",
        uo: "火"
    },
    j: {
        i: "机",
        ia: "加",
        ian: "间",
        iang: "江",
        iao: "交",
        ie: "杰",
        in : "金",
        ing: "京",
        iong: "窘",
        iu: "旧",
        u: "居",
        uan: "卷",
        ue: "绝",
        un: "军"
    },
    k: {
        a: ["卡"],
        ai: "开",
        an: "看",
        ang: "康",
        ao: "靠",
        e: "科",
        en: "肯",
        eng: "坑",
        ong: "空",
        ou: "口",
        u: "哭",
        ua: "夸",
        uai: "快",
        uan: "宽",
        uang: "框",
        ui: "亏",
        un: "昆",
        uo: "阔"
    },
    l: {
        a: "拉",
        ai: "来",
        an: "蓝",
        ang: "狼",
        ao: "老",
        e: ["乐"],
        ei: "累",
        eng: "冷",
        i: "里",
        ia: ["俩"],
        ian: "连",
        iang: "凉",
        iao: "聊",
        ie: "列",
        in : "林",
        ing: "领",
        iu: "刘",
        o: ["咯"],
        ong: "龙",
        ou: "楼",
        u: "路",
        uan: "乱",
        un: "轮",
        uo: "罗",
        v: "绿",
        ve: "略"
    },
    m: {
        a: "马",
        ai: "买",
        an: "满",
        ang: "忙",
        ao: "猫",
        e: "么",
        ei: "梅",
        en: "门",
        eng: "梦",
        i: "米",
        ian: "面",
        iao: "秒",
        ie: "灭",
        in : "民",
        ing: "明",
        iu: "谬",
        o: "魔",
        ou: "某",
        u: "木"
    },
    n: {
        a: "拿",
        ai: "乃",
        an: "南",
        ang: "囊",
        ao: "脑",
        e: ["呢"],
        ei: "内",
        en: "嫩",
        eng: "能",
        i: "你",
        ian: "年",
        iang: "娘",
        iao: "鸟",
        ie: "聂",
        in : "您",
        ing: "宁",
        iu: "牛",
        ong: "农",
        u: "努",
        uan: "暖",
        uo: "挪",
        v: "女",
        ve: "虐"
    },
    p: {
        a: "爬",
        ai: "牌",
        an: "潘",
        ang: "胖",
        ao: "炮",
        ei: "配",
        en: "喷",
        eng: "鹏",
        i: "皮",
        ian: "片",
        iao: "飘",
        ie: "撇",
        in : "拼",
        ing: "凭",
        o: "破",
        ou: "剖",
        u: "普"
    },
    q: {
        i: "齐",
        ia: "洽",
        ian: "前",
        iang: "墙",
        iao: "桥",
        ie: "且",
        in : "琴",
        ing: "轻",
        iong: "穷",
        iu: "求",
        u: "去",
        uan: "全",
        ue: "确",
        un: "群"
    },
    r: {
        an: "然",
        ang: "让",
        ao: "绕",
        e: "热",
        en: "仁",
        eng: "仍",
        i: "日",
        ong: "容",
        ou: "肉",
        u: "如",
        uan: "软",
        ui: "睿",
        un: "润",
        uo: "若"
    },
    s: {
        a: "萨",
        ai: "赛",
        an: "伞",
        ang: "桑",
        ao: "扫",
        e: "色",
        en: "森",
        eng: "僧",
        i: "司",
        ong: "宋",
        ou: "搜",
        u: "苏",
        uan: "酸",
        ui: "岁",
        un: "孙",
        uo: "锁"
    },
    t: {
        a: "它",
        ai: "台",
        an: "谈",
        ang: "汤",
        ao: "涛",
        e: "特",
        eng: "疼",
        i: "体",
        ian: "天",
        iao: "条",
        ie: "贴",
        ing: "听",
        ong: "通",
        ou: "头",
        u: "图",
        uan: "团",
        ui: "推",
        un: "吞",
        uo: "拖"
    },
    w: {
        a: "哇",
        ai: "外",
        an: "万",
        ang: "王",
        ei: "为",
        en: "文",
        eng: "翁",
        o: "我",
        u: "无"
    },
    x: {
        i: "喜",
        ia: "夏",
        ian: "现",
        iang: "项",
        iao: "小",
        ie: "谢",
        in : "心",
        ing: "星",
        iong: "兄",
        iu: "秀",
        u: "徐",
        uan: "选",
        ue: "学",
        un: "寻"
    },
    y: {
        a: "压",
        an: "燕",
        ang: "羊",
        ao: "药",
        e: "页",
        i: "以",
        in : "音",
        ing: "赢",
        o: "哟",
        ong: "用",
        ou: "有",
        u: "与",
        uan: "元",
        ue: "月",
        un: "云"
    },
    z: {
        a: "咋",
        ai: "在",
        an: "赞",
        ang: "脏",
        ao: "造",
        e: "则",
        ei: "贼",
        en: "怎",
        eng: "增",
        i: "子",
        ong: "宗",
        ou: "走",
        u: "组",
        uan: "钻",
        ui: "最",
        un: "遵",
        uo: "做"
    },
    ch: {
        a: "茶",
        ai: "拆",
        an: "产",
        ang: "场",
        ao: "超",
        e: "车",
        en: "陈",
        eng: "成",
        i: "吃",
        ong: "充",
        ou: "丑",
        u: "出",
        ua: ["欻"],
        uai: "踹",
        uan: "穿",
        uang: "床",
        ui: "吹",
        un: "纯",
        uo: "戳"
    },
    sh: {
        a: "沙",
        ai: "晒",
        an: "山",
        ang: "上",
        ao: "少",
        e: "设",
        en: "深",
        eng: "生",
        i: "是",
        ou: "收",
        u: "书",
        ua: "刷",
        uai: "帅",
        uan: "栓",
        uang: "双",
        ui: "水",
        un: "顺",
        uo: "说"
    },
    zh: {
        a: "炸",
        ai: "摘",
        an: "占",
        ang: "张",
        ao: "赵",
        e: "者",
        en: "真",
        eng: "正",
        i: "之",
        ong: "中",
        ou: "周",
        u: "主",
        ua: "爪",
        uai: "拽",
        uan: "专",
        uang: "装",
        ui: "追",
        un: "准",
        uo: "捉"
    }
};
for (var _i = 0, _Object$keys = Object.keys(Shuang.resource.dict); _i < _Object$keys.length; _i++) {
    var sheng = _Object$keys[_i],
        yunList = Shuang.resource.dict[sheng];
    Shuang.resource.dict[sheng].list = Object.keys(yunList)
}
Shuang.resource.dict.list = Object.keys(Shuang.resource.dict), Shuang.resource.dictHant = {
    "": {
        a: "啊",
        ai: "愛",
        an: "安",
        ang: "昂",
        ao: "奥",
        e: "鵝",
        ei: ["诶"],
        en: "恩",
        er: "耳",
        o: "哦",
        ou: "歐"
    },
    b: {
        a: "爸",
        ai: "白",
        an: "班",
        ang: "幫",
        ao: "包",
        ei: "背",
        en: "本",
        eng: "崩",
        i: "必",
        ian: "變",
        iao: "錶",
        ie: "别",
        in : "賓",
        ing: "冰",
        o: "播",
        u: "部"
    },
    c: {
        a: "擦",
        ai: "彩",
        an: "餐",
        ang: "苍",
        ao: "草",
        e: "測",
        en: ["岑"],
        eng: "層",
        i: "詞",
        ong: "聰",
        ou: "凑",
        u: "粗",
        uan: "竄",
        ui: "催",
        un: "村",
        uo: "錯"
    },
    d: {
        a: "打",
        ai: "代",
        an: "但",
        ang: "當",
        ao: "到",
        e: "德",
        ei: ["得"],
        eng: "等",
        i: "帝",
        ia: ["嗲"],
        ian: "點",
        iao: "釣",
        ie: "叠",
        ing: "頂",
        iu: "丢",
        ong: "東",
        ou: "鬥",
        u: "杜",
        uan: "短",
        ui: "對",
        un: "頓",
        uo: "多"
    },
    f: {
        a: "法",
        an: "翻",
        ang: "方",
        ei: "飛",
        en: "分",
        eng: "風",
        o: "佛",
        ou: ["否"],
        u: "服"
    },
    g: {
        a: ["旮"],
        ai: "該",
        an: "幹",
        ang: "剛",
        ao: "高",
        e: "個",
        ei: ["給"],
        en: "跟",
        eng: "更",
        ong: "公",
        ou: "狗",
        u: "谷",
        ua: "瓜",
        uai: "怪",
        uan: "關",
        uang: "光",
        ui: "鬼",
        un: "滚",
        uo: "國"
    },
    h: {
        a: "哈",
        ai: "海",
        an: "漢",
        ang: "杭",
        ao: "好",
        e: "盒",
        ei: "黑",
        en: "很",
        eng: "横",
        ong: "宏",
        ou: "猴",
        u: "户",
        ua: "華",
        uai: "壞",
        uan: "歡",
        uang: "黄",
        ui: "灰",
        un: "昏",
        uo: "火"
    },
    j: {
        i: "機",
        ia: "加",
        ian: "間",
        iang: "江",
        iao: "交",
        ie: "傑",
        in : "金",
        ing: "京",
        iong: "窘",
        iu: "舊",
        u: "居",
        uan: "卷",
        ue: "絶",
        un: "军"
    },
    k: {
        a: ["卡"],
        ai: "開",
        an: "看",
        ang: "康",
        ao: "靠",
        e: "科",
        en: "肯",
        eng: "坑",
        ong: "空",
        ou: "口",
        u: "哭",
        ua: "誇",
        uai: "快",
        uan: "寬",
        uang: "框",
        ui: "虧",
        un: "昆",
        uo: "闊"
    },
    l: {
        a: "拉",
        ai: "來",
        an: "藍",
        ang: "狼",
        ao: "老",
        e: ["樂"],
        ei: "累",
        eng: "冷",
        i: "裏",
        ia: ["倆"],
        ian: "連",
        iang: "凉",
        iao: "聊",
        ie: "列",
        in : "林",
        ing: "領",
        iu: "劉",
        o: ["咯"],
        ong: "龍",
        ou: "樓",
        u: "路",
        uan: "亂",
        un: "輪",
        uo: "羅",
        v: "緑",
        ve: "略"
    },
    m: {
        a: "馬",
        ai: "買",
        an: "滿",
        ang: "忙",
        ao: "猫",
        e: "麽",
        ei: "梅",
        en: "門",
        eng: "夢",
        i: "米",
        ian: "麵",
        iao: "秒",
        ie: "滅",
        in : "民",
        ing: "明",
        iu: "謬",
        o: "魔",
        ou: "某",
        u: "木"
    },
    n: {
        a: "拿",
        ai: "乃",
        an: "南",
        ang: "囊",
        ao: "腦",
        e: ["呢"],
        ei: "内",
        en: "嫩",
        eng: "能",
        i: "你",
        ian: "年",
        iang: "娘",
        iao: "鳥",
        ie: "聶",
        in : "您",
        ing: "寧",
        iu: "牛",
        ong: "農",
        u: "努",
        uan: "暖",
        uo: "挪",
        v: "女",
        ve: "虐"
    },
    p: {
        a: "爬",
        ai: "牌",
        an: "潘",
        ang: "胖",
        ao: "炮",
        ei: "配",
        en: "噴",
        eng: "鵬",
        i: "皮",
        ian: "片",
        iao: "飄",
        ie: "撇",
        in : "拼",
        ing: "憑",
        o: "破",
        ou: "剖",
        u: "普"
    },
    q: {
        i: "齊",
        ia: "洽",
        ian: "前",
        iang: "墻",
        iao: "橋",
        ie: "且",
        in : "琴",
        ing: "輕",
        iong: "窮",
        iu: "求",
        u: "去",
        uan: "全",
        ue: "確",
        un: "群"
    },
    r: {
        an: "然",
        ang: "讓",
        ao: "繞",
        e: "熱",
        en: "仁",
        eng: "仍",
        i: "日",
        ong: "容",
        ou: "肉",
        u: "如",
        uan: "軟",
        ui: "睿",
        un: "潤",
        uo: "若"
    },
    s: {
        a: "薩",
        ai: "賽",
        an: "傘",
        ang: "桑",
        ao: "掃",
        e: "色",
        en: "森",
        eng: "僧",
        i: "司",
        ong: "宋",
        ou: "搜",
        u: "蘇",
        uan: "酸",
        ui: "歲",
        un: "孫",
        uo: "鎖"
    },
    t: {
        a: "它",
        ai: "臺",
        an: "談",
        ang: "湯",
        ao: "濤",
        e: "特",
        eng: "疼",
        i: "體",
        ian: "天",
        iao: "條",
        ie: "貼",
        ing: "聽",
        ong: "通",
        ou: "頭",
        u: "圖",
        uan: "團",
        ui: "推",
        un: "吞",
        uo: "拖"
    },
    w: {
        a: "哇",
        ai: "外",
        an: "萬",
        ang: "王",
        ei: "爲",
        en: "文",
        eng: "翁",
        o: "我",
        u: "無"
    },
    x: {
        i: "喜",
        ia: "夏",
        ian: "現",
        iang: "項",
        iao: "小",
        ie: "謝",
        in : "心",
        ing: "星",
        iong: "兄",
        iu: "秀",
        u: "徐",
        uan: "選",
        ue: "學",
        un: "尋"
    },
    y: {
        a: "壓",
        an: "燕",
        ang: "羊",
        ao: "藥",
        e: "頁",
        i: "以",
        in : "音",
        ing: "贏",
        o: "喲",
        ong: "用",
        ou: "有",
        u: "與",
        uan: "元",
        ue: "月",
        un: "雲"
    },
    z: {
        a: "咋",
        ai: "在",
        an: "贊",
        ang: "髒",
        ao: "造",
        e: "則",
        ei: "賊",
        en: "怎",
        eng: "增",
        i: "子",
        ong: "宗",
        ou: "走",
        u: "組",
        uan: "鑽",
        ui: "最",
        un: "遵",
        uo: "做"
    },
    ch: {
        a: "茶",
        ai: "拆",
        an: "産",
        ang: "場",
        ao: "超",
        e: "車",
        en: "陳",
        eng: "成",
        i: "吃",
        ong: "充",
        ou: "醜",
        u: "出",
        ua: ["欻"],
        uai: "踹",
        uan: "穿",
        uang: "床",
        ui: "吹",
        un: "純",
        uo: "戳"
    },
    sh: {
        a: "沙",
        ai: "曬",
        an: "山",
        ang: "上",
        ao: "少",
        e: "設",
        en: "深",
        eng: "生",
        i: "是",
        ou: "收",
        u: "書",
        ua: "刷",
        uai: "帥",
        uan: "栓",
        uang: "雙",
        ui: "水",
        un: "順",
        uo: "説"
    },
    zh: {
        a: "炸",
        ai: "摘",
        an: "占",
        ang: "張",
        ao: "趙",
        e: "者",
        en: "真",
        eng: "正",
        i: "之",
        ong: "中",
        ou: "周",
        u: "主",
        ua: "爪",
        uai: "拽",
        uan: "專",
        uang: "裝",
        ui: "追",
        un: "準",
        uo: "捉"
    }
};
for (var _i2 = 0, _Object$keys2 = Object.keys(Shuang.resource.dictHant); _i2 < _Object$keys2.length; _i2++) {
    var _sheng = _Object$keys2[_i2],
        _yunList = Shuang.resource.dictHant[_sheng];
    Shuang.resource.dictHant[_sheng].list = Object.keys(_yunList)
}
Shuang.resource.dictHant.list = Object.keys(Shuang.resource.dictHant), Shuang.resource.bopomofo = {
    "": {
        a: "ㄚ",
        ai: "ㄞ",
        an: "ㄢ",
        ang: "ㄤ",
        ao: "ㄠ",
        e: "ㄜ",
        ei: "ㄟ",
        en: "ㄣ",
        eng: "ㄥ",
        er: "ㄦ",
        o: "ㄛ",
        ou: "ㄡ"
    },
    b: {
        a: "ㄅㄚ",
        ai: "ㄅㄞ",
        an: "ㄅㄢ",
        ang: "ㄅㄤ",
        ao: "ㄅㄠ",
        ei: "ㄅㄟ",
        en: "ㄅㄣ",
        eng: "ㄅㄥ",
        i: "ㄅ一",
        ian: "ㄅ一ㄢ",
        iao: "ㄅ一ㄠ",
        ie: "ㄅ一ㄝ",
        in : "ㄅ一ㄣ",
        ing: "ㄅ一ㄥ",
        o: "ㄅㄛ",
        u: "ㄅㄨ"
    },
    c: {
        a: "ㄘㄚ",
        ai: "ㄘㄞ",
        an: "ㄘㄢ",
        ang: "ㄘㄤ",
        ao: "ㄘㄠ",
        e: "ㄘㄜ",
        en: "ㄘㄣ",
        eng: "ㄘㄥ",
        i: "ㄘ",
        ong: "ㄘㄨㄥ",
        ou: "ㄘㄡ",
        u: "ㄘㄨ",
        uan: "ㄘㄨㄢ",
        ui: "ㄘㄨㄟ",
        un: "ㄘㄨㄣ",
        uo: "ㄘㄨㄛ"
    },
    d: {
        a: "ㄉㄚ",
        ai: "ㄉㄞ",
        an: "ㄉㄢ",
        ang: "ㄉㄤ",
        ao: "ㄉㄠ",
        e: "ㄉㄜ",
        ei: "ㄉㄟ",
        en: "ㄉㄣ",
        eng: "ㄉㄥ",
        i: "ㄉ一",
        ia: "ㄉ一ㄚ",
        ian: "ㄉ一ㄢ",
        iao: "ㄉ一ㄠ",
        ie: "ㄉ一ㄝ",
        ing: "ㄉ一ㄥ",
        iu: "ㄉ一ㄡ",
        ong: "ㄉㄨㄥ",
        ou: "ㄉㄡ",
        u: "ㄉㄨ",
        uan: "ㄉㄨㄢ",
        ui: "ㄉㄨㄟ",
        un: "ㄉㄨㄣ",
        uo: "ㄉㄨㄛ"
    },
    f: {
        a: "ㄈㄚ",
        an: "ㄈㄢ",
        ang: "ㄈㄤ",
        ei: "ㄈㄟ",
        en: "ㄈㄣ",
        eng: "ㄈㄥ",
        o: "ㄈㄛ",
        ou: "ㄈㄡ",
        u: "ㄈㄨ"
    },
    g: {
        a: "ㄍㄚ",
        ai: "ㄍㄞ",
        an: "ㄍㄢ",
        ang: "ㄍㄤ",
        ao: "ㄍㄠ",
        e: "ㄍㄜ",
        ei: "ㄍㄟ",
        en: "ㄍㄣ",
        eng: "ㄍㄥ",
        ong: "ㄍㄨㄥ",
        ou: "ㄍㄡ",
        u: "ㄍㄨ",
        ua: "ㄍㄨㄚ",
        uai: "ㄍㄨㄞ",
        uan: "ㄍㄨㄢ",
        uang: "ㄍㄨㄤ",
        ui: "ㄍㄨㄟ",
        un: "ㄍㄨㄣ",
        uo: "ㄍㄨㄛ"
    },
    h: {
        a: "ㄏㄚ",
        ai: "ㄏㄞ",
        an: "ㄏㄢ",
        ang: "ㄏㄤ",
        ao: "ㄏㄠ",
        e: "ㄏㄜ",
        ei: "ㄏㄟ",
        en: "ㄏㄣ",
        eng: "ㄏㄥ",
        ong: "ㄏㄨㄥ",
        ou: "ㄏㄡ",
        u: "ㄏㄨ",
        ua: "ㄏㄨㄚ",
        uai: "ㄏㄨㄞ",
        uan: "ㄏㄨㄢ",
        uang: "ㄏㄨㄤ",
        ui: "ㄏㄨㄟ",
        un: "ㄏㄨㄣ",
        uo: "ㄏㄨㄛ"
    },
    j: {
        i: "ㄐ一",
        ia: "ㄐ一ㄚ",
        ian: "ㄐ一ㄢ",
        iang: "ㄐ一ㄤ",
        iao: "ㄐ一ㄠ",
        ie: "ㄐ一ㄝ",
        in : "ㄐ一ㄣ",
        ing: "ㄐ一ㄥ",
        iong: "ㄐㄩㄥ",
        iu: "ㄐ一ㄡ",
        u: "ㄐㄩ",
        uan: "ㄐㄩㄢ",
        ue: "ㄐㄩㄝ",
        un: "ㄐㄩㄣ"
    },
    k: {
        a: "ㄎㄚ",
        ai: "ㄎㄞ",
        an: "ㄎㄢ",
        ang: "ㄎㄤ",
        ao: "ㄎㄠ",
        e: "ㄎㄜ",
        ei: "ㄎㄟ",
        en: "ㄎㄣ",
        eng: "ㄎㄥ",
        ong: "ㄎㄨㄥ",
        ou: "ㄎㄡ",
        u: "ㄎㄨ",
        ua: "ㄎㄨㄚ",
        uai: "ㄎㄨㄞ",
        uan: "ㄎㄨㄢ",
        uang: "ㄎㄨㄤ",
        ui: "ㄎㄨㄟ",
        un: "ㄎㄨㄣ",
        uo: "ㄎㄨㄛ"
    },
    l: {
        a: "ㄌㄚ",
        ai: "ㄌㄞ",
        an: "ㄌㄢ",
        ang: "ㄌㄤ",
        ao: "ㄌㄠ",
        e: "ㄌㄜ",
        ei: "ㄌㄟ",
        eng: "ㄌㄥ",
        i: "ㄌ一",
        ia: "ㄌ一ㄚ",
        ian: "ㄌ一ㄢ",
        iang: "ㄌ一ㄤ",
        iao: "ㄌ一ㄠ",
        ie: "ㄌ一ㄝ",
        in : "ㄌ一ㄣ",
        ing: "ㄌ一ㄥ",
        iu: "ㄌ一ㄡ",
        o: "ㄌㄛ",
        ong: "ㄌㄨㄥ",
        ou: "ㄌㄡ",
        u: "ㄌㄨ",
        uan: "ㄌㄨㄢ",
        un: "ㄌㄨㄣ",
        uo: "ㄌㄨㄛ",
        v: "ㄌㄩ",
        ve: "ㄌㄩㄝ"
    },
    m: {
        a: "ㄇㄚ",
        ai: "ㄇㄞ",
        an: "ㄇㄢ",
        ang: "ㄇㄤ",
        ao: "ㄇㄠ",
        e: "ㄇㄜ",
        ei: "ㄇㄟ",
        en: "ㄇㄣ",
        eng: "ㄇㄥ",
        i: "ㄇ一",
        ian: "ㄇ一ㄢ",
        iao: "ㄇ一ㄠ",
        ie: "ㄇ一ㄝ",
        in : "ㄇ一ㄣ",
        ing: "ㄇ一ㄥ",
        iu: "ㄇ一ㄡ",
        o: "ㄇㄛ",
        ou: "ㄇㄡ",
        u: "ㄇㄨ"
    },
    n: {
        a: "ㄋㄚ",
        ai: "ㄋㄞ",
        an: "ㄋㄢ",
        ang: "ㄋㄤ",
        ao: "ㄋㄠ",
        e: "ㄋㄜ",
        ei: "ㄋㄟ",
        en: "ㄋㄣ",
        eng: "ㄋㄥ",
        i: "ㄋ一",
        ian: "ㄋ一ㄢ",
        iang: "ㄋ一ㄤ",
        iao: "ㄋ一ㄠ",
        ie: "ㄋ一ㄝ",
        in : "ㄋ一ㄣ",
        ing: "ㄋ一ㄥ",
        iu: "ㄋ一ㄡ",
        ong: "ㄋㄨㄥ",
        ou: "ㄋㄡ",
        u: "ㄋㄨ",
        uan: "ㄋㄨㄢ",
        uo: "ㄋㄨㄛ",
        v: "ㄋㄩ",
        ve: "ㄋㄩㄝ"
    },
    p: {
        a: "ㄆㄚ",
        ai: "ㄆㄞ",
        an: "ㄆㄢ",
        ang: "ㄆㄤ",
        ao: "ㄆㄠ",
        ei: "ㄆㄟ",
        en: "ㄆㄣ",
        eng: "ㄆㄥ",
        i: "ㄆ一",
        ian: "ㄆ一ㄢ",
        iao: "ㄆ一ㄠ",
        ie: "ㄆ一ㄝ",
        in : "ㄆ一ㄣ",
        ing: "ㄆ一ㄥ",
        o: "ㄆㄛ",
        ou: "ㄆㄡ",
        u: "ㄆㄨ"
    },
    q: {
        i: "ㄑ一",
        ia: "ㄑ一ㄚ",
        ian: "ㄑ一ㄢ",
        iang: "ㄑ一ㄤ",
        iao: "ㄑ一ㄠ",
        ie: "ㄑ一ㄝ",
        in : "ㄑ一ㄣ",
        ing: "ㄑ一ㄥ",
        iong: "ㄑㄩㄥ",
        iu: "ㄑ一ㄡ",
        u: "ㄑㄩ",
        uan: "ㄑㄩㄢ",
        ue: "ㄑㄩㄝ",
        un: "ㄑㄩㄣ"
    },
    r: {
        an: "ㄖㄢ",
        ang: "ㄖㄤ",
        ao: "ㄖㄠ",
        e: "ㄖㄜ",
        en: "ㄖㄣ",
        eng: "ㄖㄥ",
        i: "ㄖ",
        ong: "ㄖㄨㄥ",
        ou: "ㄖㄡ",
        u: "ㄖㄨ",
        ua: "ㄖㄨㄚ",
        uan: "ㄖㄨㄢ",
        ui: "ㄖㄨㄟ",
        un: "ㄖㄨㄣ",
        uo: "ㄖㄨㄛ"
    },
    s: {
        a: "ㄙㄚ",
        ai: "ㄙㄞ",
        an: "ㄙㄢ",
        ang: "ㄙㄤ",
        ao: "ㄙㄠ",
        e: "ㄙㄜ",
        en: "ㄙㄣ",
        eng: "ㄙㄥ",
        i: "ㄙ",
        ong: "ㄙㄨㄥ",
        ou: "ㄙㄡ",
        u: "ㄙㄨ",
        uan: "ㄙㄨㄢ",
        ui: "ㄙㄨㄟ",
        un: "ㄙㄨㄣ",
        uo: "ㄙㄨㄛ"
    },
    t: {
        a: "ㄊㄚ",
        ai: "ㄊㄞ",
        an: "ㄊㄢ",
        ang: "ㄊㄤ",
        ao: "ㄊㄠ",
        e: "ㄊㄜ",
        eng: "ㄊㄥ",
        i: "ㄊ一",
        ian: "ㄊ一ㄢ",
        iao: "ㄊ一ㄠ",
        ie: "ㄊ一ㄝ",
        ing: "ㄊ一ㄥ",
        ong: "ㄊㄨㄥ",
        ou: "ㄊㄡ",
        u: "ㄊㄨ",
        uan: "ㄊㄨㄢ",
        ui: "ㄊㄨㄟ",
        un: "ㄊㄨㄣ",
        uo: "ㄊㄨㄛ"
    },
    w: {
        a: "ㄨㄚ",
        ai: "ㄨㄞ",
        an: "ㄨㄢ",
        ang: "ㄨㄤ",
        ei: "ㄨㄟ",
        en: "ㄨㄣ",
        eng: "ㄨㄥ",
        o: "ㄨㄛ",
        u: "ㄨ"
    },
    x: {
        i: "ㄒ一",
        ia: "ㄒ一ㄚ",
        ian: "ㄒ一ㄢ",
        iang: "ㄒ一ㄤ",
        iao: "ㄒ一ㄠ",
        ie: "ㄒ一ㄝ",
        in : "ㄒ一ㄣ",
        ing: "ㄒ一ㄥ",
        iong: "ㄒㄩㄥ",
        iu: "ㄒ一ㄡ",
        u: "ㄒㄩ",
        uan: "ㄒㄩㄢ",
        ue: "ㄒㄩㄝ",
        un: "ㄒㄩㄣ"
    },
    y: {
        a: "一ㄚ",
        an: "一ㄢ",
        ang: "一ㄤ",
        ao: "一ㄠ",
        e: "一ㄛ",
        i: "一",
        in : "一ㄣ",
        ing: "一ㄥ",
        o: "一ㄛ",
        ong: "ㄩㄥ",
        ou: "一ㄡ",
        u: "ㄩ",
        uan: "ㄩㄢ",
        ue: "ㄩㄝ",
        un: "ㄩㄣ"
    },
    z: {
        a: "ㄗㄚ",
        ai: "ㄗㄞ",
        an: "ㄗㄢ",
        ang: "ㄗㄤ",
        ao: "ㄗㄠ",
        e: "ㄗㄜ",
        ei: "ㄗㄟ",
        en: "ㄗㄣ",
        eng: "ㄗㄥ",
        i: "ㄗ",
        ong: "ㄗㄨㄥ",
        ou: "ㄗㄡ",
        u: "ㄗㄨ",
        uan: "ㄗㄨㄢ",
        ui: "ㄗㄨㄟ",
        un: "ㄗㄨㄣ",
        uo: "ㄗㄨㄛ"
    },
    ch: {
        a: "ㄔㄚ",
        ai: "ㄔㄞ",
        an: "ㄔㄢ",
        ang: "ㄔㄤ",
        ao: "ㄔㄠ",
        e: "ㄔㄜ",
        en: "ㄔㄣ",
        eng: "ㄔㄥ",
        i: "ㄔ",
        ong: "ㄔㄨㄥ",
        ou: "ㄔㄡ",
        u: "ㄔㄨ",
        ua: "ㄔㄨㄚ",
        uai: "ㄔㄨㄞ",
        uan: "ㄔㄨㄢ",
        uang: "ㄔㄨㄤ",
        ui: "ㄔㄨㄟ",
        un: "ㄔㄨㄣ",
        uo: "ㄔㄨㄛ"
    },
    sh: {
        a: "ㄕㄚ",
        ai: "ㄕㄞ",
        an: "ㄕㄢ",
        ang: "ㄕㄤ",
        ao: "ㄕㄠ",
        e: "ㄕㄜ",
        ei: "ㄕㄟ",
        en: "ㄕㄣ",
        eng: "ㄕㄥ",
        i: "ㄕ",
        ou: "ㄕㄡ",
        u: "ㄕㄨ",
        ua: "ㄕㄨㄚ",
        uai: "ㄕㄨㄞ",
        uan: "ㄕㄨㄢ",
        uang: "ㄕㄨㄤ",
        ui: "ㄕㄨㄟ",
        un: "ㄕㄨㄣ",
        uo: "ㄕㄨㄛ"
    },
    zh: {
        a: "ㄓㄚ",
        ai: "ㄓㄞ",
        an: "ㄓㄢ",
        ang: "ㄓㄤ",
        ao: "ㄓㄠ",
        e: "ㄓㄜ",
        ei: "ㄓㄟ",
        en: "ㄓㄣ",
        eng: "ㄓㄥ",
        i: "ㄓ",
        ong: "ㄓㄨㄥ",
        ou: "ㄓㄡ",
        u: "ㄓㄨ",
        ua: "ㄓㄨㄚ",
        uai: "ㄓㄨㄞ",
        uan: "ㄓㄨㄢ",
        uang: "ㄓㄨㄤ",
        ui: "ㄓㄨㄟ",
        un: "ㄓㄨㄣ",
        uo: "ㄓㄨㄛ"
    }
}, Shuang.resource.schemeList = {
    ziranma: "自然码",
    sougou: "搜狗双拼",
    weiruan: "微软双拼",
    xiaohe: "小鹤双拼",
    zhinengabc: "智能ABC",
    pinyinjiajia: "拼音加加",
    ziguang: "紫光双拼",
    guobiao: "国标双拼*",
    xiaolang: "小浪双拼*",
    daniu: "大牛双拼*",
    lantian: "蓝天双拼*",
    jiandao3: "键道双拼3**",
    jiandao6: "键道双拼6**",
    xingkong: "星空双拼**",
    xiaoguan: "开源小鹳**",
    xiaoyue: "小月双拼**",
    yunbiaokuaipin: "韵标块拼**",
    c: "C双拼**",
    baiyun: "白云双拼**"
}, Shuang.app.modeList = {
    "all-random": {
        name: "全部随机",
        desc: "全部拼音组合"
    },
    "all-order": {
        name: "全部顺序",
        desc: "全部拼音组合"
    },
    "hard-random": {
        name: "困难随机",
        desc: "韵母需转换"
    },
    "hard-random-without-pinyin": {
        name: "无拼音",
        desc: "无拼音提示"
    }
}, Shuang.resource.keyboardLayoutList = {
    qwerty: "QWERTY",
    dvorak: "Dvorak",
    colemak: "Colemak",
    workman: "Workman",
    azerty: "AZERTY",
    qwertz: "QWERTZ",
    qzerty: "QZERTY"
}, Shuang.core.keyboardLayout = (_KeyboardLayout = function() {
    function a() {
        var b = this,
            c = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : "",
            d = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : {}, e = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : function() {
                0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : ""
            };
        _classCallCheck(this, a), this.keyboardLayout = d, this.computeKeyboardStyle(), a.initCanvas(a.CANVAS_WIDTH, a.CANVAS_HEIGHT), a.context.fillStyle = a.CANVAS_FILL_STYLE, a.context.fillRect(0, 0, a.CANVAS_WIDTH, a.CANVAS_HEIGHT), this.loadImage(c, function() {
            b.onImageLoad(), a.getUrl(e)
        })
    }
    return _createClass(a, [{
        key: "computeKeyboardStyle",
        value: function() {
            var a = 8 < this.keyboardLayout.row3.length,
                b = "f" !== this.keyboardLayout.row2[3] || "j" !== this.keyboardLayout.row2[6],
                c = 7 < this.keyboardLayout.row3.length;
            this.keyboardStyle = {
                fixKeyStart: a,
                fixUnderscore: b,
                fixName: c
            }
        }
    }, {
        key: "loadImage",
        value: function() {
            var b = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : "",
                c = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : function() {};
            this.img = new Image(a.IMAGE_WIDTH, a.IMAGE_HEIGHT), this.img.setAttribute("crossOrigin", "Anonymous"), this.img.setAttribute("src", b), this.img.onload = c
        }
    }, {
        key: "onImageLoad",
        value: function() {
            this.drawRow(0, this.keyboardLayout.row1), this.drawRow(1, this.keyboardLayout.row2), this.drawRow(2, this.keyboardLayout.row3), this.drawTable(), this.drawName()
        }
    }, {
        key: "drawRow",
        value: function() {
            for (var a, b = this, c = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : 0, d = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : [], e = function a() {
                    var e = d[f];
                    if (!e) return 0;
                    var g = ["q", "w", "e", "r", "t", "y", "u", "i", "o", "p"].findIndex(function(a) {
                        return a === e
                    });
                    if (-1 !== g) return b.drawKey(e, 0, g, c, f), 0;
                    var h = ["a", "s", "d", "f", "g", "h", "j", "k", "l", ";"].findIndex(function(a) {
                        return a === e
                    });
                    if (-1 !== h) return b.drawKey(e, 1, h, c, f), 0;
                    var i = ["z", "x", "c", "v", "b", "n", "m"].findIndex(function(a) {
                        return a === e
                    });
                    if (-1 !== i) return b.drawKey(e, 2, i, c, f), 0
                }, f = 0; f < d.length; f++) a = e(), 0 === a
        }
    }, {
        key: "drawKey",
        value: function b() {
            var c = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : "",
                d = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : 0,
                e = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : 0,
                f = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : 0,
                g = 4 < arguments.length && arguments[4] !== void 0 ? arguments[4] : 0,
                h = a.KEY_BODY_START_X + a.KEY_SIZE / 2 * d + a.KEY_SIZE * e,
                i = a.KEY_BODY_START_Y + a.KEY_SIZE * d,
                j = a.KEY_BODY_START_X + a.KEY_SIZE / 2 * f + a.KEY_SIZE * g + (this.keyboardStyle.fixKeyStart ? -a.KEY_SIZE / 2 : 0),
                k = a.KEY_BODY_START_Y + a.KEY_SIZE * f,
                l = a.KEY_BORDER_START_X + a.KEY_SIZE / 2 * f + a.KEY_SIZE * g + (this.keyboardStyle.fixKeyStart ? -a.KEY_SIZE / 2 : 0),
                m = a.KEY_BORDER_START_Y + a.KEY_SIZE * f;
            a.context.fillStyle = a.CANVAS_FILL_STYLE, a.context.fillRect(j, k, a.KEY_BODY_WIDTH, a.KEY_BODY_HEIGHT), a.context.drawImage(this.img, h, i, a.KEY_BODY_WIDTH, a.KEY_BODY_HEIGHT, j, k, a.KEY_BODY_WIDTH, a.KEY_BODY_HEIGHT), a.context.lineWidth = a.KEY_BORDER_STROKE_WIDTH, a.context.strokeStyle = a.KEY_BORDER_STROKE_STYLE, a.context.strokeRect(l, m, a.KEY_BORDER_WIDTH, a.KEY_BORDER_HEIGHT), this.keyboardStyle.fixUnderscore && (["f", "j"].includes(c) && this.drawUnderscore(f, g, a.CANVAS_FILL_STYLE), 1 === f && [3, 6].includes(g) && this.drawUnderscore(f, g, a.KEY_UNDERSCORE_FILL_STYLE, "t" === c ? -3 : 0))
        }
    }, {
        key: "drawUnderscore",
        value: function b() {
            var c = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : 0,
                d = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : 0,
                e = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : "",
                f = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : 0,
                g = a.KEY_BODY_START_X + a.KEY_SIZE / 2 * c + a.KEY_SIZE * d + a.KEY_UNDERSCORE_START_X + (this.keyboardStyle.fixKeyStart ? -a.KEY_SIZE / 2 : 0),
                h = a.KEY_BODY_START_Y + a.KEY_SIZE * c + a.KEY_UNDERSCORE_START_Y;
            a.context.fillStyle = e, a.context.fillRect(g, h, a.KEY_UNDERSCORE_WIDTH + f, a.KEY_UNDERSCORE_HEIGHT)
        }
    }, {
        key: "drawTable",
        value: function b() {
            a.context.drawImage(this.img, 0, a.KEYBOARD_AREA_HEIGHT, a.IMAGE_WIDTH, a.IMAGE_HEIGHT - a.KEYBOARD_AREA_HEIGHT, 0, a.KEYBOARD_AREA_HEIGHT, a.IMAGE_WIDTH, a.IMAGE_HEIGHT - a.KEYBOARD_AREA_HEIGHT)
        }
    }, {
        key: "drawName",
        value: function b() {
            var c = this.keyboardStyle.fixName ? a.KEYBOARD_AREA_HEIGHT : a.NAME_AREA_START_Y;
            a.context.drawImage(this.img, a.NAME_AREA_START_X, a.NAME_AREA_START_Y, a.NAME_AREA_WIDTH, a.NAME_AREA_HEIGHT, a.NAME_AREA_START_X, c, a.NAME_AREA_WIDTH, a.NAME_AREA_HEIGHT)
        }
    }], [{
        key: "initCanvas",
        value: function b() {
            var c = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : a.CANVAS_WIDTH,
                d = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : a.CANVAS_HEIGHT;
            a.canvas || (a.canvas = document.createElement("canvas"), a.canvas.setAttribute("id", a.CANVAS_ID)), a.canvas.setAttribute("width", c), a.canvas.setAttribute("height", d), a.context = a.canvas.getContext("2d", {
                alpha: !1
            })
        }
    }, {
        key: "show",
        value: function b() {
            document.getElementById(a.CANVAS_ID) || document.body.appendChild(a.canvas)
        }
    }, {
        key: "getUrl",
        value: function b() {
            var c = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : function() {
                    var a = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : ""
                };
            a.canvas.toBlob ? a.canvas.toBlob(function(a) {
                c(URL.createObjectURL(a))
            }) : c(a.canvas.toDataURL())
        }
    }, {
        key: "init",
        value: function b() {
            var c = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : "",
                d = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : {}, e = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : function() {
                    var a = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : ""
                };
            a.instance = new a(c, d, e)
        }
    }])
}(), _defineProperty(_KeyboardLayout, "instance", void 0), _defineProperty(_KeyboardLayout, "canvas", void 0), _defineProperty(_KeyboardLayout, "context", void 0), _defineProperty(_KeyboardLayout, "IMAGE_WIDTH", 1936), _defineProperty(_KeyboardLayout, "IMAGE_HEIGHT", 828), _defineProperty(_KeyboardLayout, "CANVAS_ID", "keyboard-layout-canvas"), _defineProperty(_KeyboardLayout, "CANVAS_WIDTH", 1936), _defineProperty(_KeyboardLayout, "CANVAS_HEIGHT", 828), _defineProperty(_KeyboardLayout, "CANVAS_FILL_STYLE", "#ffffff"), _defineProperty(_KeyboardLayout, "KEYBOARD_AREA_HEIGHT", 600), _defineProperty(_KeyboardLayout, "NAME_AREA_START_X", 1600), _defineProperty(_KeyboardLayout, "NAME_AREA_START_Y", 450), _defineProperty(_KeyboardLayout, "NAME_AREA_WIDTH", 400), _defineProperty(_KeyboardLayout, "NAME_AREA_HEIGHT", 250), _defineProperty(_KeyboardLayout, "KEY_SIZE", 178), _defineProperty(_KeyboardLayout, "KEY_BODY_START_X", 35), _defineProperty(_KeyboardLayout, "KEY_BODY_START_Y", 32), _defineProperty(_KeyboardLayout, "KEY_BODY_WIDTH", 172), _defineProperty(_KeyboardLayout, "KEY_BODY_HEIGHT", 172), _defineProperty(_KeyboardLayout, "KEY_BORDER_START_X", 32), _defineProperty(_KeyboardLayout, "KEY_BORDER_START_Y", 29), _defineProperty(_KeyboardLayout, "KEY_BORDER_WIDTH", 178), _defineProperty(_KeyboardLayout, "KEY_BORDER_HEIGHT", 177), _defineProperty(_KeyboardLayout, "KEY_BORDER_STROKE_WIDTH", 3), _defineProperty(_KeyboardLayout, "KEY_BORDER_STROKE_STYLE", "#000000"), _defineProperty(_KeyboardLayout, "KEY_UNDERSCORE_START_X", 24), _defineProperty(_KeyboardLayout, "KEY_UNDERSCORE_START_Y", 52), _defineProperty(_KeyboardLayout, "KEY_UNDERSCORE_WIDTH", 36), _defineProperty(_KeyboardLayout, "KEY_UNDERSCORE_HEIGHT", 6), _defineProperty(_KeyboardLayout, "KEY_UNDERSCORE_FILL_STYLE", "#000000"), _KeyboardLayout), Shuang.core.model = function() {
    function a() {
        var b = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : "",
            c = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : "";
        _classCallCheck(this, a), this.sheng = b.toLowerCase(), this.yun = c.toLowerCase(), this.dict = Shuang.resource.dict[this.sheng][this.yun], this.scheme = new Set, this.view = {
            sheng: this.sheng.toUpperCase().slice(0, 1) + this.sheng.slice(1),
            yun: this.yun
        }
    }
    return _createClass(a, [{
        key: "beforeJudge",
        value: function a() {
            var b = this;
            this.scheme.clear();
            var c = Shuang.app.setting.config.scheme,
                d = Shuang.resource.scheme[c].detail,
                e = this.sheng + this.yun;
            if (d.other[e]) Array.isArray(d.other[e]) ? d.other[e].forEach(function(a) {
                return b.scheme.add(a)
            }) : this.scheme.add(d.other[e]);
            else {
                var f, g = _createForOfIteratorHelper(d.sheng[this.sheng]);
                try {
                    for (g.s(); !(f = g.n()).done;) {
                        var h, i = f.value,
                            j = _createForOfIteratorHelper(d.yun[this.yun]);
                        try {
                            for (j.s(); !(h = j.n()).done;) {
                                var k = h.value;
                                this.scheme.add(i + k)
                            }
                        } catch (a) {
                            j.e(a)
                        } finally {
                            j.f()
                        }
                    }
                } catch (a) {
                    g.e(a)
                } finally {
                    g.f()
                }
                if ("u" === this.yun && "jqxy".includes(this.sheng)) {
                    var l, m = _createForOfIteratorHelper(d.sheng[this.sheng]);
                    try {
                        for (m.s(); !(l = m.n()).done;) {
                            var n, o = l.value,
                                p = _createForOfIteratorHelper(d.yun.v);
                            try {
                                for (p.s(); !(n = p.n()).done;) {
                                    var q = n.value;
                                    this.scheme.add(o + q)
                                }
                            } catch (a) {
                                p.e(a)
                            } finally {
                                p.f()
                            }
                        }
                    } catch (a) {
                        m.e(a)
                    } finally {
                        m.f()
                    }
                }
            }
        }
    }, {
        key: "judge",
        value: function a() {
            var b = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "",
                c = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : "";
            return this.beforeJudge(), this.scheme.has(b.toLowerCase() + c.toLowerCase())
        }
    }], [{
        key: "getRandom",
        value: function b() {
            var c = Math.floor,
                d = Shuang.resource.dict.list[c(Math.random() * Shuang.resource.dict.list.length)],
                e = Shuang.resource.dict[d].list[c(Math.random() * Shuang.resource.dict[d].list.length)],
                f = new a(d, e);
            return a.isSame(f, Shuang.core.current) ? a.getRandom() : f
        }
    }, {
        key: "getHardRandom",
        value: function b() {
            var c;
            do c = a.getRandom(); while ("" === c.sheng || 1 === c.yun.length);
            return c
        }
    }, {
        key: "getByOrder",
        value: function b() {
            for (; !0;) {
                var c = Shuang.resource.dict.list[Shuang.core.order.shengIndex];
                if (c !== void 0) {
                    var d = Shuang.resource.dict[c].list[Shuang.core.order.yunIndex];
                    if (d) return Shuang.core.order.yunIndex++, new a(c, d)
                }
                0 === Shuang.core.order.yunIndex ? Shuang.core.order.shengIndex = 0 : (Shuang.core.order.shengIndex++, Shuang.core.order.yunIndex = 0)
            }
        }
    }, {
        key: "isSame",
        value: function b(c, a) {
            return c.sheng === a.sheng && c.yun === a.yun
        }
    }])
}(), Shuang.app.setting = {
    config: {},
    reload: function a() {
        this.config = {
            scheme: readStorage("scheme") || "ziranma",
            mode: readStorage("mode") || "all-random",
            keyboardLayout: readStorage("keyboardLayout") || "qwerty",
            showPic: readStorage("showPic") || "true",
            darkMode: readStorage("darkMode") || detectDarkMode().toString(),
            autoNext: readStorage("autoNext") || "true",
            autoClear: readStorage("autoClear") || "true",
            showKeys: readStorage("showKeys") || "true",
            showPressedKey: readStorage("showPressedKey") || "true",
            disableMobileKeyboard: readStorage("disableMobileKeyboard") || "false",
            bopomofo: readStorage("bopomofo") || "false"
        };
        var b = this.config,
            c = b.scheme,
            d = b.mode,
            e = b.keyboardLayout,
            f = b.showPic,
            g = b.darkMode,
            h = b.autoNext,
            i = b.autoClear,
            j = b.showKeys,
            k = b.showPressedKey,
            l = b.disableMobileKeyboard,
            m = b.bopomofo;
        Array.prototype.find.call($("#scheme-select").children, function(a) {
            return Shuang.resource.schemeList[c].startsWith(a.innerText)
        }).selected = !0, $("#mode-select")[Object.keys(Shuang.app.modeList).indexOf(d)].selected = !0, $("#keyboard-layout-select")[Object.keys(Shuang.resource.keyboardLayoutList).indexOf(e)].selected = !0, $("#pic-switcher").checked = "true" === f, $("#dark-mode-switcher").checked = "true" === g, $("#auto-next-switcher").checked = "true" === h, $("#auto-clear-switcher").checked = "true" === i, $("#show-keys").checked = "true" === j, $("#show-pressed-key").checked = "true" === k, $("#disable-mobile-keyboard").checked = "true" === l, $("#bopomofo-switcher").checked = "true" === m, this.setKeyboardLayout(Shuang.resource.keyboardLayoutList[e]), this.setScheme(Shuang.resource.schemeList[c], !1), this.setMode(Shuang.app.modeList[d].name), this.setPicVisible(f), this.setDarkMode(g), this.setAutoNext(h), this.setAutoClear(i), this.setShowKeys(j), this.setShowPressedKey(k), this.setDisableMobileKeyboard(l), this.setBopomofo(m)
    },
    setScheme: function b(a) {
        var c = this,
            d = !(1 < arguments.length && arguments[1] !== void 0) || arguments[1];
        this.config.scheme = Object.keys(Shuang.resource.schemeList)[Object.values(Shuang.resource.schemeList).findIndex(function(b) {
            return b.startsWith(a)
        })], importJS(this.config.scheme, function() {
            d && Shuang.app.action.next(), Shuang.core.current.beforeJudge(), c.updateKeyboardLayout(), c.updateKeysHint(), c.updateTips()
        }), writeStorage("scheme", this.config.scheme)
    },
    setMode: function b(a) {
        Shuang.core.history = [];
        for (var c = 0, d = Object.entries(Shuang.app.modeList); c < d.length; c++) {
            var e = _slicedToArray(d[c], 2),
                f = e[0],
                g = e[1].name;
            if (g === a) {
                this.config.mode = f, $("#mode-desc").innerText = Shuang.app.modeList[f].desc, $("#q").style.display = "hard-random-without-pinyin" === f ? "none" : "block";
                break
            }
        }
        writeStorage("mode", this.config.mode)
    },
    setPicVisible: function b(a) {
        this.config.showPic = a.toString(), "false" === this.config.showPic ? $("#keyboard").style.display = "none" : "true" === this.config.showPic && ($("#keyboard").style.display = "block"), writeStorage("showPic", this.config.showPic), this.updateKeysHintLayoutRatio()
    },
    setDarkMode: function b(a) {
        this.config.darkMode = a.toString(), "true" === this.config.darkMode ? $("body").setAttribute("class", "dark-mode") : "false" === this.config.darkMode && $("body").setAttribute("class", ""), writeStorage("darkMode", this.config.darkMode)
    },
    setAutoNext: function b(a) {
        this.config.autoNext = a.toString(), writeStorage("autoNext", this.config.autoNext)
    },
    setAutoClear: function b(a) {
        this.config.autoClear = a.toString(), writeStorage("autoClear", this.config.autoClear)
    },
    setShowKeys: function b(a) {
        this.config.showKeys = a.toString(), writeStorage("showKeys", this.config.showKeys), this.updateKeysHint()
    },
    setShowPressedKey: function b(a) {
        this.config.showPressedKey = a.toString(), writeStorage("showPressedKey", this.config.showPressedKey)
    },
    setDisableMobileKeyboard: function b(a) {
        this.config.disableMobileKeyboard = a.toString(), "true" === this.config.disableMobileKeyboard ? $("#a").setAttribute("inputmode", "none") : "false" === this.config.disableMobileKeyboard && $("#a").setAttribute("inputmode", "text"), writeStorage("disableMobileKeyboard", this.config.disableMobileKeyboard)
    },
    setBopomofo: function b(a) {
        this.config.bopomofo = a.toString(), this.updateQAndDict(), this.updateKeyboardLayout(), this.updateKeysHint(), writeStorage("bopomofo", this.config.bopomofo)
    },
    updateQAndDict: function a() {
        $("#q").innerText = "false" === this.config.bopomofo ? Shuang.core.current.view.sheng + Shuang.core.current.view.yun : Shuang.resource.bopomofo[Shuang.core.current.view.sheng.toLowerCase()][Shuang.core.current.view.yun], $("#dict").innerText = "false" === this.config.bopomofo ? Shuang.core.current.dict : Shuang.resource.dictHant[Shuang.core.current.view.sheng.toLowerCase()][Shuang.core.current.view.yun]
    },
    updateKeysHint: function a() {
        if (Shuang.resource.keyboardLayout[this.config.keyboardLayout]) {
            this.updateSimulateKeyboard(), this.updateKeysHintLayoutRatio();
            var b, c = $$(".key"),
                d = _createForOfIteratorHelper(c);
            try {
                for (d.s(); !(b = d.n()).done;) {
                    var e = b.value;
                    e.classList.remove("answer")
                }
            } catch (a) {
                d.e(a)
            } finally {
                d.f()
            }
            if ("false" !== this.config.showKeys) {
                var f, g = new Set,
                    h = _createForOfIteratorHelper(Shuang.core.current.scheme);
                try {
                    for (h.s(); !(f = h.n()).done;) {
                        var i = _slicedToArray(f.value, 2),
                            j = i[0],
                            k = i[1];
                        g.add(j), g.add(k)
                    }
                } catch (a) {
                    h.e(a)
                } finally {
                    h.f()
                }
                var l, m = _createForOfIteratorHelper(c);
                try {
                    for (m.s(); !(l = m.n()).done;) {
                        var n = l.value;
                        g.has(n.getAttribute("key").toLowerCase()) && n.classList.add("answer")
                    }
                } catch (a) {
                    m.e(a)
                } finally {
                    m.f()
                }
            }
        }
    },
    updateKeysHintLayoutRatio: function a() {
        if (700 > $("body").scrollWidth) {
            var b = 310 === $("body").scrollWidth ? 310 : $("#pic").scrollWidth,
                c = 1874 / 1928 * b / 680;
            if (1 > c) return void(navigator && navigator.userAgent && /firefox/i.test(navigator.userAgent) ? ($("#keys").style.transform = "scale(".concat(c, ")"), $("#keys").style.transformOrigin = "left top") : $("#keys").style.zoom = c)
        }
        navigator && navigator.userAgent && /firefox/i.test(navigator.userAgent) ? ($("#keys").style.transform = "unset", $("#keys").style.transformOrigin = "unset") : $("#keys").style.zoom = "unset"
    },
    updatePressedKeyHint: function b(a) {
        if ("false" !== this.config.showPressedKey && a) {
            this.updateKeysHintLayoutRatio();
            var c, d = $$(".key"),
                e = _createForOfIteratorHelper(d);
            try {
                var f = function b() {
                    var d = c.value;
                    d.classList.remove("pressed"), d.getAttribute("key") && d.getAttribute("key").toLowerCase() === a && (d.classList.add("pressed"), setTimeout(function() {
                        d.classList.remove("pressed")
                    }, 250))
                };
                for (e.s(); !(c = e.n()).done;) f()
            } catch (a) {
                e.e(a)
            } finally {
                e.f()
            }
        }
    },
    updateTips: function a() {
        var b = $("#tips");
        b.innerHTML = "";
        var c = Shuang.resource.scheme[this.config.scheme];
        if (c.tips) {
            var d, e = Array.isArray(c.tips) ? c.tips : [c.tips],
                f = _createForOfIteratorHelper(e);
            try {
                for (f.s(); !(d = f.n()).done;) {
                    var g = d.value,
                        h = document.createElement("div");
                    h.classList.add("line"), h.innerHTML = g, b.appendChild(h)
                }
            } catch (a) {
                f.e(a)
            } finally {
                f.f()
            }
        }
    },
    setKeyboardLayout: function b(a) {
        var c = this;
        this.config.keyboardLayout = Object.keys(Shuang.resource.keyboardLayoutList)[Object.values(Shuang.resource.keyboardLayoutList).findIndex(function(b) {
            return a === b
        })], importJS(this.config.keyboardLayout, function() {
            c.updateKeyboardLayout()
        }), writeStorage("keyboardLayout", this.config.keyboardLayout)
    },
    updateKeyboardLayout: function a() {
        var b = this;
        return "qwerty" === this.config.keyboardLayout ? ($("#pic").setAttribute("src", "./resources/".concat(this.config.scheme).concat("true" === this.config.bopomofo ? ".bopomofo" : "", ".svg")), $("#keys").classList.remove("fix-left"), this.updateSimulateKeyboard(), void this.updateKeysHint()) : void(!Shuang.resource.keyboardLayout[this.config.keyboardLayout] || Shuang.core.keyboardLayout.init("img/".concat(this.config.scheme).concat("true" === this.config.bopomofo ? ".bopomofo" : "", ".png"), Shuang.resource.keyboardLayout[this.config.keyboardLayout], function(a) {
            var c = $("#pic").getAttribute("src");
            c && c.startsWith("blob:") && URL.revokeObjectURL(c), Shuang.core.keyboardLayout.instance.keyboardStyle.fixKeyStart ? $("#keys").classList.add("fix-left") : $("#keys").classList.remove("fix-left"), $("#pic").setAttribute("src", a), b.updateSimulateKeyboard(), b.updateKeysHint()
        }))
    },
    updateSimulateKeyboard: function a() {
        if (Shuang.resource.keyboardLayout[this.config.keyboardLayout]) {
            for (var b, c = $$("#keys .row-1 .key"), d = 0; d < c.length; d++) b = Shuang.resource.keyboardLayout[this.config.keyboardLayout].row1[d], c[d].setAttribute("key", b ? b.toUpperCase() : "");
            for (var e, f = $$("#keys .row-2 .key"), g = 0; g < f.length; g++) e = Shuang.resource.keyboardLayout[this.config.keyboardLayout].row2[g], f[g].setAttribute("key", e ? e.toUpperCase() : "");
            for (var h, j = $$("#keys .row-3 .key"), k = 0; k < j.length; k++) h = Shuang.resource.keyboardLayout[this.config.keyboardLayout].row3[k], j[k].setAttribute("key", h ? h.toUpperCase() : "")
        }
    }
};

function detectDarkMode() {
    return !!(window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches) || !! (6 > new Date().getHours() || 22 < new Date().getHours())
}

function readStorage() {
    var a = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : "";
    return localStorage.getItem(a)
}

function writeStorage() {
    var a = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : "",
        b = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : "";
    localStorage.setItem(a, b)
}
Shuang.app.action = {
    init: function a() {
        var b = this;

        function c(a, b, c) {
            b.forEach(function(b) {
                var c = document.createElement("option");
                b.disabled && c.setAttribute("disabled", "disabled"), c.innerText = b.text || b, a.appendChild(c)
            }), a.onchange = function(a) {
                c(a.target.value)
            }
        }
        navigator && navigator.userAgent && /windows|linux/i.test(navigator.userAgent) && (Shuang.resource.emoji = {
            right: "✔️",
            wrong: "❌"
        });
        var d = Object.values(Shuang.resource.schemeList),
            e = {
                common: d.filter(function(a) {
                    return !a.endsWith("*")
                }),
                uncommon: d.filter(function(a) {
                    return a.endsWith("*") && !a.endsWith("**")
                }).map(function(a) {
                    return a.slice(0, -1)
                }),
                rare: d.filter(function(a) {
                    return a.endsWith("**")
                }).map(function(a) {
                    return a.slice(0, -2)
                })
            }, f = [{
                disabled: !0,
                text: "常见"
            }].concat(_toConsumableArray(e.common), [{
                disabled: !0,
                text: "小众"
            }], _toConsumableArray(e.uncommon), [{
                disabled: !0,
                text: "爱好者"
            }], _toConsumableArray(e.rare));
        c($("#scheme-select"), f, function(a) {
            Shuang.app.setting.setScheme(a)
        }), c($("#mode-select"), Object.values(Shuang.app.modeList).map(function(a) {
            return a.name
        }), function(a) {
            Shuang.app.setting.setMode(a), b.next()
        });
        var g = Object.values(Shuang.resource.keyboardLayoutList);
        c($("#keyboard-layout-select"), g, function(a) {
            Shuang.app.setting.setKeyboardLayout(a)
        }), Shuang.core.current = new Shuang.core.model("sh", "uang"), Shuang.app.setting.reload(), document.addEventListener("keydown", function(a) {
            ["Backspace", "Tab", "Enter", " "].includes(a.key) && (a.preventDefault ? a.preventDefault() : event.returnValue = !1)
        }), document.addEventListener("keyup", function(a) {
            b.keyPressed(a)
        }), $("#pic-switcher").addEventListener("change", function(a) {
            Shuang.app.setting.setPicVisible(a.target.checked)
        }), $("#show-keys").addEventListener("change", function(a) {
            Shuang.app.setting.setShowKeys(a.target.checked)
        }), $("#dark-mode-switcher").addEventListener("change", function(a) {
            Shuang.app.setting.setDarkMode(a.target.checked)
        }), $("#more-settings-switcher").addEventListener("click", function(a) {
            Shuang.app.action.toggleMoreSettingsVisible()
        }), $("#auto-next-switcher").addEventListener("change", function(a) {
            Shuang.app.setting.setAutoNext(a.target.checked)
        }), $("#auto-clear-switcher").addEventListener("change", function(a) {
            Shuang.app.setting.setAutoClear(a.target.checked)
        }), $("#show-pressed-key").addEventListener("change", function(a) {
            Shuang.app.setting.setShowPressedKey(a.target.checked)
        }), $("#disable-mobile-keyboard").addEventListener("change", function(a) {
            Shuang.app.setting.setDisableMobileKeyboard(a.target.checked)
        }), $("#bopomofo-switcher").addEventListener("change", function(a) {
            Shuang.app.setting.setBopomofo(a.target.checked)
        }), $("#dict").addEventListener("click", function() {
            Shuang.core.current.beforeJudge(), $("#a").value = Shuang.core.current.scheme.values().next().value, b.judge()
        }), window.addEventListener("resize", Shuang.app.setting.updateKeysHintLayoutRatio), window.resizeTo(window.outerWidth, window.outerHeight);
        for (var h = $$(".key"), j = 0; j < h.length && !(navigator && navigator.userAgent && /msie|trident/i.test(navigator.userAgent)); j++) h[j].addEventListener("click", function(a) {
            var b = a.target.getAttribute("key");
            if (b) {
                var c = new KeyboardEvent("keyup", {
                    key: b.toLowerCase()
                });
                c.simulated = !0, document.dispatchEvent(c)
            }
        });
        Shuang.app.setting.updateQAndDict(), this.redo()
    },
    keyPressed: function b(a) {
        switch (a.key) {
            case "Backspace":
                this.redo();
                break;
            case "Tab":
                Shuang.core.current.beforeJudge(), $("#a").value = Shuang.core.current.scheme.values().next().value, this.judge();
                break;
            case "Enter":
            case " ":
                this.judge() ? this.next() : this.redo();
                break;
            default:
                a.simulated && ($("#a").value += a.key.toLowerCase()), $("#a").value = $("#a").value.slice(0, 2).replace(/[^a-zA-Z;]/g, "").split("").map(function(a, b) {
                    return 0 === b ? a.toUpperCase() : a.toLowerCase()
                }).join(""), Shuang.app.setting.updatePressedKeyHint(a.key);
                var c = 2 === $("#a").value.length,
                    d = this.judge();
                c && (d && "true" === Shuang.app.setting.config.autoNext ? this.next(a.simulated) : !d && "true" === Shuang.app.setting.config.autoClear && this.redo(a.simulated))
        }
    },
    judge: function a() {
        var b = this,
            c = $("#a"),
            d = $("#btn"),
            e = _slicedToArray(c.value, 2),
            f = e[0],
            g = e[1];
        return g && Shuang.core.current.judge(f, g) ? (d.onclick = function() {
            return b.next(!0)
        }, d.innerText = Shuang.resource.emoji.right, !0) : (d.onclick = function() {
            return b.redo(!0)
        }, d.innerText = Shuang.resource.emoji.wrong, !1)
    },
    redo: function b(a) {
        var c = this;
        $("#a").value = "", a || $("#a").focus(), $("#btn").onclick = function() {
            return c.redo(a)
        }, $("#btn").innerText = Shuang.resource.emoji.wrong
    },
    next: function b(a) {
        switch (this.redo(a), Shuang.app.setting.config.mode) {
            case "all-random":
                Shuang.core.current = Shuang.core.model.getRandom();
                break;
            case "all-order":
                Shuang.core.current = Shuang.core.model.getByOrder();
                break;
            case "hard-random":
                Shuang.core.current = Shuang.core.model.getHardRandom();
                break;
            case "hard-random-without-pinyin":
                do Shuang.core.current = Shuang.core.model.getHardRandom(); while (Array.isArray(Shuang.core.current.dict))
        }
        Shuang.core.history.includes(Shuang.core.current.sheng + Shuang.core.current.yun) ? this.next() : Shuang.core.history = [].concat(_toConsumableArray(Shuang.core.history), [Shuang.core.current.sheng + Shuang.core.current.yun]).slice(-100), Shuang.app.setting.updateQAndDict(), Shuang.core.current.beforeJudge(), Shuang.app.setting.updateKeysHint()
    },
    qrShow: function b(a) {
        $("#" + a).style.display = "block"
    },
    qrHide: function b(a) {
        a.style.display = "none"
    },
    toggleMoreSettingsVisible: function a() {
        $("#more-settings").style.display = "block" === $("#more-settings").style.display ? "none" : "block", $("#more-settings-switcher").innerText = "block" === $("#more-settings").style.display ? "收起更多" : "展开更多"
    }
};
var polyfills = ["https://cdn.jsdelivr.net/npm/@babel/polyfill@7.12.1/dist/polyfill.min.js", "https://cdn.jsdelivr.net/npm/classlist.js@1.1.20150312/classList.min.js"];
if (navigator && navigator.userAgent && /msie|trident/i.test(navigator.userAgent)) {
    var _step10, imported = 0,
        _iterator10 = _createForOfIteratorHelper(polyfills);
    try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
            var polyfill = _step10.value,
                script = document.createElement("script");
            script.setAttribute("src", polyfill), script.onload = function() {
                imported++, imported === polyfills.length && Shuang.app.action.init()
            }, document.head.appendChild(script)
        }
    } catch (a) {
        _iterator10.e(a)
    } finally {
        _iterator10.f()
    }
} else Shuang.app.action.init();